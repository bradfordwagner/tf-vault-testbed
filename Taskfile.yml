# https://taskfile.dev
---
version: '3'


vars:
  vault_addr:
    sh: cat ~/.vault-addr
  vault_token:
    sh: cat ~/.vault-root-token
  vault_kubeconfig:
    sh: cat ~/.vault-kubeconfig
  env_secrets_file: "{{ .USER_WORKING_DIR }}/.secrets.sh"
  vault_k8s_namespace: vault
  set_config: |
    export namespace={{ .vault_k8s_namespace }}
    export KUBECONFIG={{ .vault_kubeconfig }}
  tmp_token_file: /tmp/vault_token

  # these probably need to be edited
  argocd_namespace: akp-gitops

  mount: u
  mounts: |
    u: auth/userpass/login/bob
    k: kubernetes/creds/list-pods
    t: auth/token/create

env:
  KUBECONFIG: '{{ .vault_kubeconfig }}'
  VAULT_ADDR: '{{ .vault_addr }}'
  VAULT_FORMAT: json
  VAULT_TOKEN: '{{ .vault_token }}'


# vars:

tasks:
  clear:
    internal: true
    cmds: [clear]
  clean:
    cmds: [rm -rf .terraform* planfile terraform.tfstate* out.json jit.auto.tfvars]
  tf_init:
    internal: true
    deps: [clear]
    cmds: [terraform init]
  tf_plan:
    deps: [tf_init]
    cmds:
      - |
        # run terraform plan
        terraform plan -out=planfile
  tf_apply:
    cmds:
      - task: tf_plan
      - terraform apply "planfile"
  tf_destroy:
    deps: [clear]
    cmds:
      - terraform destroy -auto-approve
      - task: clean
  default:
    deps: [tf_plan]
  status:
    cmds:
      - vault status -format=json | jq

  apply_appsets:
    cmds:
      - |
        set -x
        kubectl apply -n {{ .argocd_namespace }} -f ./appsets/vso.yaml
        kubectl apply -n {{ .argocd_namespace }} -f ./appsets/vault_webhook_injector.yaml
        kubectl apply -n {{ .argocd_namespace }} -f ./appsets/vault_auth.yaml
  delete_appsets:
    cmds:
      - |
        set -x
        kubectl delete -n {{ .argocd_namespace }} -f ./appsets/vso.yaml
        kubectl delete -n {{ .argocd_namespace }} -f ./appsets/vault_webhook_injector.yaml
        kubectl delete -n {{ .argocd_namespace }} -f ./appsets/vault_auth.yaml

  init_kube_auth:
    cmds:
      - |
        {{ .set_config }}
        set -x

        # setup vault auth
        api_server=https://kubernetes.default.svc.cluster.local # api_server=$(yq -r '.clusters[0].cluster.server' ${KUBECONFIG})
        ca_certificate_file=/tmp/ca.crt
        yq -r '.clusters[0].cluster["certificate-authority-data"]' ${KUBECONFIG} | base64 -d > ${ca_certificate_file}

        # setup auth
        service_account=vault-auth
        token_review_jwt=$(kubectl get secret ${service_account} -n ${namespace} -o go-template='{{`{{.data.token }}`}}' | base64 -d)
        vault write auth/kubernetes/config \
          kubernetes_host="${api_server}" \
          token_reviewer_jwt="${token_review_jwt}" \
          kubernetes_ca_cert="@${ca_certificate_file}" \
          disable_iss_validation=true

        # setup kubernetes engine
        service_account=vault-secrets
        token_review_jwt=$(kubectl get secret ${service_account} -n ${namespace} -o go-template='{{`{{.data.token }}`}}' | base64 -d)
        vault write kubernetes/config \
          kubernetes_host="${api_server}" \
          kubernetes_ca_cert="@${ca_certificate_file}" \
          service_account_jwt="${token_review_jwt}" \
          disable_local_ca_jwt=true

  userpass_login:
    cmds:
      -  |
          pass=$(yq '.users.bob.password' ./config.yaml)
          res=$(vault login -no-store -method=userpass username=bob password=${pass})
          echo ${res} | jq
          echo ${res} | jq '.auth.client_token' -r > {{ .tmp_token_file }}
          bat -P {{ .tmp_token_file }}
## todo after pki backend ######################################
  init_pki_backend:
    cmds:
      - |
        common_name=$(yq -r '.pki_backend.common_name' ./config.yaml)
        vault write pki/root/generate/internal \
          common_name=${common_name} \
          ttl=8760h # 1yr

        vault write pki/config/urls \
          issuing_certificates="${VAULT_ADDR}/v1/pki/ca" \
          crl_distribution_points="${VAULT_ADDR}/v1/pki/crl"

  issue_cert:
    cmds:
      - |
        vault write pki/issue/list_pods \
          common_name=list-pods.cluster.local \
          | jq

  cert_clean:
    cmds:
      - vault delete auth/cert/certs/list_pods
  cert_login:
    env:
      CAROOT: '{{ .pem_cache_dir }}'
    cmds:
      - |
          svc_name=list_pods.svc
          cert_file=${CAROOT}/${svc_name}.cert.pem
          key_file=${CAROOT}/${svc_name}.key.pem
          # mkcert \
          #   -client \
          #   -cert-file ${cert_file} \
          #   -key-file ${key_file} \
          #   ${svc_name}


          echo cert_file=${cert_file},key_file=${key_file}
          vault login \
            -method=cert \
            -ca-cert ${CAROOT}/rootCA.pem \
            -client-cert=${cert_file} \
            -client-key=${key_file} \
            -no-store \
            -format=json \
            name=list_pods \
            | jq


          # pass=$(yq '.users.bob.password' ./config.yaml)
          # res=$(vault login -no-store -method=userpass username=bob password=${pass})
          # echo ${res} | jq
          # echo ${res} | jq '.auth.client_token' -r > {{ .tmp_token_file }}
          # bat -P {{ .tmp_token_file }}
################################################################
  token_login:
    vars:
      type: '{{ .type | default "service" }}' # service|batch
      orphan: '{{ .orphan | default "false" }}'
    cmds:
      - |
          res=$(vault token create \
            -policy="list_pods" \
            {{ if eq "true" .orphan }}-orphan{{ end }} \
            -type={{ .type }}
          )
          echo ${res} | jq
          echo ${res} | jq '.auth.client_token' -r > {{ .tmp_token_file }}
          bat -P {{ .tmp_token_file }}
  token_lookup:
    cmds:
      - |
          export VAULT_TOKEN=$(cat {{ .tmp_token_file }})
          vault token lookup | jq
  vault_issue_ctx:
    vars:
      kubernetes_namespace: '{{ .kubernetes_namespace | default "vault" }}'
      kubernetes_role: list-pods
      use_cluster_role: true
      cluster: kubernetes
    env:
      KUBECONFIG: "/tmp/{{ .cluster }}"
      VAULT_FORMAT: json
      approle_role: '{{ .approle_role }}'
      cluster: '{{ .cluster }}'
      kubernetes_namespace: '{{ .kubernetes_namespace }}'
      kubernetes_role: '{{ .kubernetes_role }}'
      use_cluster_role: '{{ .use_cluster_role }}'
      kube_port: 6443
    cmds:
      # always clean up context upon completion
      - defer: rm ${KUBECONFIG}
      - |
        export VAULT_TOKEN=$(cat {{ .tmp_token_file }})
        vault token lookup | jq

        # # set the namespace after root login
        # export VAULT_NAMESPACE={{ .vault_namespace }}
        export res=$(vault write kubernetes/creds/${kubernetes_role} \
          kubernetes_namespace=${kubernetes_namespace} \
          cluster_role_binding=${use_cluster_role}
        )
        user=$(echo ${res} | jq -r .data.service_account_name)
        token=$(echo ${res} | jq -r .data.service_account_token)
        echo ${res} | jq

        cluster_config=$(vault read kubernetes/config)
        ca_certificate=$(echo ${cluster_config} | jq -r .data.kubernetes_ca_cert | base64)
        server=$(echo ${cluster_config} | jq -r .data.kubernetes_host)
        server=https://0.0.0.0:${kube_port}
        echo ${cluster_config} | jq

        # # setup kube config
        kubectl config set-context ${cluster} --cluster=${cluster}
        kubectl config set-cluster ${cluster} --server=${server}
        kubectl config set clusters.${cluster}.certificate-authority-data "${ca_certificate}"
        kubectl config set-credentials user --token=${token}
        kubectl config set-context ${cluster} --user=user
        kubectl config use-context ${cluster}

        # ## Test credentials
        # # cluster scoped
        kubecolor get ns
        kubecolor get po -A
  list_leases:
    vars:
      m: '{{ .m | default .mount }}'
    env:
      mount:
        sh: echo '{{ .mounts }}' | yq -r .{{ .m }}
    cmds:
      - echo m={{ .m }},mount=${mount}
      - vault list sys/leases/lookup | jq
      - vault list sys/leases/lookup/${mount} | jq
      - vault list sys/leases/lookup/${mount} | jq '.[]' -r | xargs -I{} vault write sys/leases/lookup lease_id=${mount}/{} | jq
  revoke_leases:
    vars:
      m: '{{ .m | default .mount }}'
    env:
      mount:
        sh: echo '{{ .mounts }}' | yq -r .{{ .m }}
    cmds:
      - echo m={{ .m }},mount=${mount}
      - vault list sys/leases/lookup | jq
      - vault list sys/leases/lookup/${mount} | jq
      - vault list sys/leases/lookup/${mount} | jq '.[]' -r | xargs -I{} vault write sys/leases/revoke lease_id=${mount}/{} | jq
