# https://taskfile.dev
---
version: '3'


vars:
  vault_addr:
    sh: cat ~/.vault-addr
  vault_token:
    sh: cat ~/.vault-root-token
  vault_kubeconfig:
    sh: cat ~/.vault-kubeconfig
  env_secrets_file: "{{ .USER_WORKING_DIR }}/.secrets.sh"
  vault_k8s_namespace: vault
  set_config: |
    export namespace={{ .vault_k8s_namespace }}
    export KUBECONFIG={{ .vault_kubeconfig }}
  argocd_namespace: akp-gitops

env:
  KUBECONFIG: '{{ .vault_kubeconfig }}'
  VAULT_ADDR: '{{ .vault_addr }}'
  VAULT_FORMAT: json
  VAULT_TOKEN: '{{ .vault_token }}'


# vars:

tasks:
  clear:
    internal: true
    cmds: [clear]
  clean:
    cmds: [rm -rf .terraform* planfile terraform.tfstate* out.json jit.auto.tfvars]
  tf_init:
    internal: true
    deps: [clear]
    cmds: [terraform init]
  tf_plan:
    deps: [tf_init]
    cmds:
      - |
        # run terraform plan
        terraform plan -out=planfile
  tf_apply:
    cmds:
      - task: tf_plan
      - terraform apply "planfile"
  tf_destroy:
    deps: [clear]
    cmds:
      - terraform destroy -auto-approve
      - task: clean
  default:
    deps: [tf_plan]
  status:
    cmds:
      - vault status -format=json | jq

  apply_appsets:
    cmds:
      - |
        set -x
        kubectl apply -n {{ .argocd_namespace }} -f ./appsets/vso.yaml
        kubectl apply -n {{ .argocd_namespace }} -f ./appsets/vault_webhook_injector.yaml
        kubectl apply -n {{ .argocd_namespace }} -f ./appsets/vault_auth.yaml
  delete_appsets:
    cmds:
      - |
        set -x
        kubectl delete -n {{ .argocd_namespace }} -f ./appsets/vso.yaml
        kubectl delete -n {{ .argocd_namespace }} -f ./appsets/vault_webhook_injector.yaml
        kubectl delete -n {{ .argocd_namespace }} -f ./appsets/vault_auth.yaml

  auth_apply:
    cmds:
      - |
        {{ .set_config }}
        set -x

        # setup vault auth
        api_server=https://kubernetes.default.svc.cluster.local # api_server=$(yq -r '.clusters[0].cluster.server' ${KUBECONFIG})
        ca_certificate_file=/tmp/ca.crt
        yq -r '.clusters[0].cluster["certificate-authority-data"]' ${KUBECONFIG} | base64 -d > ${ca_certificate_file}

        # setup auth
        service_account=vault-auth
        token_review_jwt=$(kubectl get secret ${service_account} -n ${namespace} -o go-template='{{`{{.data.token }}`}}' | base64 -d)
        vault write auth/kubernetes/config \
          kubernetes_host="${api_server}" \
          token_reviewer_jwt="${token_review_jwt}" \
          kubernetes_ca_cert="@${ca_certificate_file}" \
          disable_iss_validation=true

        # setup kubernetes engine
        service_account=vault-secrets
        token_review_jwt=$(kubectl get secret ${service_account} -n ${namespace} -o go-template='{{`{{.data.token }}`}}' | base64 -d)
        vault write kubernetes/config \
          kubernetes_host="${api_server}" \
          kubernetes_ca_cert="@${ca_certificate_file}" \
          service_account_jwt="${token_review_jwt}" \
          disable_local_ca_jwt=true

  token_lease:
    vars:
      type: '{{ .type | default "batch" }}'
      orphan: '{{ .orphan | default true }}'
    cmds:
      - |
          # if orphan is true set orphan variable to "-orphan"
          if [[ "{{ .orphan }}" == "true" ]]; then
            orphan="-orphan"
          fi
          vault token create -policy="list_pods" ${orphan} -type={{ .type }} | jq
